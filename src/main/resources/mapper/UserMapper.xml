<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ms.blog.dao.UserMapper">
    <insert id="insertUserAuth" parameterType="com.ms.blog.entity.UserAuth" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO b_user_auth(email, nickname, avatar, intro, website, is_disable, create_time, update_time) VALUES (
                                        #{email},
                                        #{nickname},
                                        #{avatar},
                                        #{intro},
                                        #{website},
                                        #{isDisabled},
                                        #{createTime},
                                        #{updateTime}
        )
    </insert>
    <insert id="insertUserInfo">
        INSERT INTO b_user(username,password,create_time,update_time,status,login_type,user_auth_id,
                           role_id,ip_address,ip_source, os,last_login_time,browser
                           ) VALUES (#{username},#{password},#{createTime},#{updateTime},
                                    #{status},#{loginType},#{userAuthId},#{roleId},
                                    #{ipAddress},#{ipSource},#{os},#{lastLoginTime},
                                    #{browser})
    </insert>
    <insert id="insertUserCancellation">
        INSERT INTO b_cancellation_request(user_id, username, email, create_time, reason_text) VALUES (
            #{userId},
            #{username},
            #{email},
            #{createTime},
            #{reasonText})
    </insert>
    <update id="updateLastLoginTime">
       UPDATE b_user SET last_login_time = #{date} WHERE username = #{username}
    </update>
    <update id="updateUserInfoDetails">
        UPDATE b_user_auth
        <set>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="avatar != null">
                avatar = #{avatar},
            </if>
            <if test="intro != null">
                intro = #{intro},
            </if>
            <if test="website != null">
                website = #{website}
            </if>
        </set>
        WHERE b_user_auth.id=#{id}
    </update>
    <update id="updateUserStatus">
        UPDATE b_user SET status = #{status} WHERE id = #{id}
    </update>

    <update id="updateUserPasswordById">
        update b_user SET password = #{password}, update_time=#{updateTime} where id=#{id}
    </update>

    <select id="userLoginByUsername" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE username = #{username} and password = #{password}
    </select>
    <select id="userLoginByEmail" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM  b_user WHERE (SELECT id FROM b_user_auth WHERE email = #{email}) = user_auth_id and password = #{password}
    </select>
    <select id="findUserByUsername" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE username = #{username}
    </select>
    <select id="findUserByEmail" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE (SELECT id FROM b_user_auth WHERE email = #{email}) = user_auth_id
    </select>
    <select id="getUserInfo" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE username = #{username}
    </select>
    <select id="getUserInfoDetails" resultType="com.ms.blog.entity.UserAuth">
        SELECT id, email, nickname, avatar, intro, website, is_disable, create_time, update_time
        FROM b_user_auth WHERE (SELECT user_auth_id FROM b_user WHERE  username = #{username}) = id
    </select>
    <select id="getUserList" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE status=1
        <if test="userParam.username != null">
            AND username = #{username}
        </if>
        <if test="userParam.ipSourse != null">
            AND ip_source = #{ipSource}
        </if>
        <if test="userParam.roleId != null">
            AND role_id = #{roleId}
        </if>
        <if test="userParam.os !=null">
            AND os = #{os}
        </if>
        <if test="userParam.browser != null">
            AND browser = #{browser}
        </if>
    </select>
    <select id="getUserById" resultType="com.ms.blog.entity.User">
        SELECT id,username,password,create_time,update_time,status,login_type,user_auth_id,role_id,
               ip_address,ip_source,os,last_login_time,browser
        FROM b_user WHERE id=#{id}
    </select>
    <select id="getUserAuthById" resultType="com.ms.blog.entity.UserAuth">
        select id,
               email,
               nickname,
               avatar,
               intro,
               website,
               is_disable,
               create_time,
               update_time
        from b_user_auth WHERE b_user_auth.id=(SELECT user_auth_id FROM b_user WHERE b_user.id=#{id})
    </select>
    <select id="getUserIdByEmail" resultType="java.lang.Integer">
        select b_user.id from b_user,b_user_auth where email=#{email} and b_user_auth.id=b_user.user_auth_id
    </select>
</mapper>